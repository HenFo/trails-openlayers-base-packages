// Vitest Snapshot v1

exports[`throws for ambiguous service reference 1`] = `"runtime:ambiguous-dependency: Service 'map-user::MapUser' requires the ambiguous interface 'services.Map' as dependency 'dep_0'. Possible choices are map::Map1, map::Map2."`;

exports[`throws when a component depends on itself via a larger cycle 1`] = `"runtime:dependency-cycle: Detected dependency cycle: 'A::a' => 'B::b' ('dep_0' providing 'B') => 'C::c' ('dep_1' providing 'C') => 'A::a' ('dep_2' providing 'A')."`;

exports[`throws when a component directly depends on itself 1`] = `"runtime:dependency-cycle: Detected dependency cycle: 'map::Map' => 'map::Map' ('dep_0' providing 'services.Map')."`;

exports[`throws when a service is not implemented 1`] = `"runtime:interface-not-found: Service 'tools::ExampleTool' requires an unimplemented interface 'services.Map' as dependency 'dep_0'."`;

exports[`throws when an interface is implemented multiple times 1`] = `"runtime:duplicate-interface: Cannot register 'map::Map2' as interface 'services.Map'. 'services.Map' is already provided by service 'map::Map1'. If you intend you have multiple implementations in your application, you must use the 'qualifier' attribute."`;

exports[`throws when the ui requires an interface that is not implemented 1`] = `"runtime:interface-not-found: The UI of package 'foo' requires an unimplemented interface 'services.Map2'."`;
